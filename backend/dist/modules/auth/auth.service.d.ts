import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { Model } from 'mongoose';
import { UserDocument } from '../../shared/database/schemas/user.schema';
import { LoginDto, RegisterDto, AuthResponseDto, ChangePasswordDto } from './dto/auth.dto';
import { AuditService } from '../../shared/audit/audit.service';
import { PasswordService } from './services/password.service';
export declare class AuthService {
    private userModel;
    private jwtService;
    private configService;
    private auditService;
    private passwordService;
    private readonly logger;
    private readonly failedAttempts;
    private readonly maxFailedAttempts;
    private readonly lockoutDuration;
    private readonly attemptWindow;
    constructor(userModel: Model<UserDocument>, jwtService: JwtService, configService: ConfigService, auditService: AuditService, passwordService: PasswordService);
    validateUser(email: string, password: string, ipAddress?: string): Promise<UserDocument | null>;
    login(loginDto: LoginDto, ipAddress?: string, userAgent?: string): Promise<AuthResponseDto>;
    register(registerDto: RegisterDto, ipAddress?: string, userAgent?: string): Promise<AuthResponseDto>;
    refreshTokens(refreshToken: string): Promise<AuthResponseDto>;
    logout(userId: string, refreshToken: string): Promise<void>;
    logoutAll(userId: string): Promise<void>;
    changePassword(userId: string, changePasswordDto: ChangePasswordDto): Promise<void>;
    forgotPassword(email: string, ipAddress?: string): Promise<void>;
    resetPassword(token: string, newPassword: string): Promise<void>;
    private generateTokens;
    private saveRefreshToken;
    private removeRefreshToken;
    private parseExpirationToSeconds;
    private checkAccountLockout;
    private recordFailedAttempt;
    private clearFailedAttempts;
}
